@model ArtistApplication.Domain.ViewModel.AlbumDetailsViewModel

@{
    ViewData["Title"] = "Album Details";
}

<div class="container container.lg" >
    <div class="text-center mb-4">
        @if (!string.IsNullOrEmpty(Model.Album?.PictureUrl))
        {
            var imageUrl = Url.Content(Model.Album.PictureUrl);
            <img src="@imageUrl" alt="Album Picture" class="img-fluid" style="max-width: 300px; height: auto;" />
        }
        else
        {
            <p>No picture available.</p>
        }
    </div>

    <div class="text-center">
        <h2>@Model.Album?.Title</h2>
        <p><strong>Artist:</strong> @Model.Artist?.Name</p>
        <p><strong>Genre:</strong> @Model.Genre?.Name</p>
        <p><strong>Year:</strong> @Model.Album?.Year</p>
    </div>

    <h4 class="text-center mt-4">Songs</h4>
    @if (Model.Songs != null && Model.Songs.Any())
    {
        <table class="table table-transparent custom-table border-dark">
            <thead>
                <tr>
                    <th class="border-dark" style="color:white"></th>
                    <th class="border-dark" style="color:white">Title </th>
                    <th class="border-dark" style="color:white"></th>
                    <th class="border-dark" style="color:white"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.Songs)
                {
                    <tr>
                        <td>
                            @if (!string.IsNullOrEmpty(item.Album?.PictureUrl))
                            {
                                var imageUrl = Url.Content(item.Album.PictureUrl);
                                <img src="@imageUrl" alt="Album Picture" class="img-fluid image-margin" style="max-width: 70px; height: auto;" />
                            }
                            else
                            {
                                <p>No picture available.</p>
                            }
                        </td>

                        <td>
                            <div>
                                <strong style="color:white">@item.Title</strong>
                                <br />
                                <em style="color:white">@item.Album?.Title</em>
                            </div>
                        </td>

                        <td>
                            @if (!string.IsNullOrEmpty(item?.FileName))
                            {
                                var audioFileUrl = Url.Content($"~/uploads/{item.FileName}");

                                <div class="custom-audio-player" data-audio-url="@audioFileUrl">
                                    <button class="play-pause-btn">
                                        <i class="bi bi-play-fill"></i>
                                    </button>
                                    <input type="range" class="seek-bar" value="0" min="0" max="100" step="1">
                                    <span class="current-time">0:00</span> / <span class="duration">0:00</span>
                                    <input type="range" class="volume-bar" value="100" min="0" max="100" step="1">
                                </div>
                            }
                            else
                            {
                                <p>No audio file available.</p>
                            }
                        </td>

                        <td>
                            <div class="dropdown">
                                <button class="btn dropdown-toggle custom-burger-icon" type="button" id="dropdownMenuButton-@item.Id" data-bs-toggle="dropdown" aria-expanded="false">
                                    <span class="burger-lines"></span>
                                    <span class="burger-lines"></span>
                                    <span class="burger-lines"></span>
                                </button>
                                <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton-@item.Id">
                                    <li>
                                        @if (Model.LikedSongIds.Contains(item.Id))
                                        {
                                            @using (Html.BeginForm("Unlike", "Songs", FormMethod.Post, new { @id = "unlike-form-" + item.Id }))
                                            {
                                                @Html.Hidden("songId", item.Id)
                                                <button type="submit" class="dropdown-item" onclick="handleUnlike('@item.Id'); return false;">Unlike</button>
                                            }
                                        }
                                        else
                                        {
                                            @using (Html.BeginForm("Like", "Songs", FormMethod.Post, new { @id = "like-form-" + item.Id }))
                                            {
                                                @Html.Hidden("songId", item.Id)
                                                <button type="submit" class="dropdown-item" onclick="handleLike('@item.Id'); return false;">Like</button>
                                            }
                                        }
                                    </li>
                                    <li>
                                        <a asp-action="Edit" asp-route-id="@item.Id" class="dropdown-item">Edit</a>
                                    </li>
                                    <li>
                                        <a asp-action="Details" asp-route-id="@item.Id" class="dropdown-item">Details</a>
                                    </li>
                                    <li>
                                        @using (Html.BeginForm("Delete", "Songs", FormMethod.Post, new { @id = "delete-form-" + item.Id }))
                                        {
                                            @Html.AntiForgeryToken()
                                            @Html.Hidden("songId", item.Id)
                                            <button type="submit" class="dropdown-item" onclick="return confirm('Are you sure you want to delete this song?');">Delete</button>
                                        }
                                    </li>
                                </ul>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p class="text-center">No songs available.</p>
    }

</div>

@section Scripts {
    <script>
        function handleLike(songId) {
            var form = document.getElementById('like-form-' + songId);
            fetch(form.action, {
                method: form.method,
                body: new URLSearchParams(new FormData(form)),
                headers: { 'X-Requested-With': 'XMLHttpRequest' }
            }).then(response => {
                if (response.ok) {
                    location.reload();
                }
            });
        }

        function handleUnlike(songId) {
            var form = document.getElementById('unlike-form-' + songId);
            fetch(form.action, {
                method: form.method,
                body: new URLSearchParams(new FormData(form)),
                headers: { 'X-Requested-With': 'XMLHttpRequest' }
            }).then(response => {
                if (response.ok) {
                    location.reload();
                }
            });
        }
    </script>
}
