@model ArtistApplication.Domain.ViewModel.PlaylistViewModel

@{
    ViewData["Title"] = "Playlist Details";
}

<div class="container container.lg " >
    <div class="row justify-content-center">
        <div class="col-md-8">
            <hr />

            <div class="text-center">
                <h2>@Model.Name</h2>
            </div>

            <div class="text-center mb-4">
                @if (!string.IsNullOrEmpty(Model.PictureUrl))
                {
                    var imageUrl = Url.Content(Model.PictureUrl);
                    <img src="@imageUrl" alt="Playlist Picture" class="img-fluid" style="max-width: 300px; height: auto;" />
                }
                else
                {
                    <p>No picture available.</p>
                }
            </div>

            <div class="text-center">
                <p><strong></strong> @Model.Description</p>
                <p><strong></strong> @Model.UserName</p>
            </div>

            @if (Model.Songs != null && Model.Songs.Any())
            {
                <table class="table table-transparent custom-table border-dark">
                    <thead>
                        <tr>
                            <th class="border-dark" style="color:white"></th>
                            <th class="border-dark" style="color:white">Title </th>
                            <th class="border-dark" style="color:white"></th>
                            <th class="border-dark" style="color:white"></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var song in Model.Songs)
                        {
                            <tr>
                                <!-- Song Image -->
                                <td>
                                    @if (!string.IsNullOrEmpty(song.Song.Album?.PictureUrl))
                                    {
                                        var imageUrl = Url.Content(song.Song.Album.PictureUrl);
                                        <img src="@imageUrl" alt="Album Picture" class="img-fluid image-margin" style="max-width: 70px; height: auto;" />
                                    }
                                    else
                                    {
                                        <p>No picture available.</p>
                                    }
                                </td>

                                <!-- Song Title and Album Title -->
                                <td>
                                    <div>
                                        <strong style="color:white">@song.Song.Title</strong>
                                        <br />
                                        <em style="color:white">@song.Song.Album.Title</em>
                                    </div>
                                </td>

                                <!-- Audio Playback (if available) -->
                                <td>
                                    @if (!string.IsNullOrEmpty(song.Song?.FileName))
                                    {
                                        var audioFileUrl = Url.Content($"~/uploads/{song.Song.FileName}");

                                        <div class="custom-audio-player" data-audio-url="@audioFileUrl">
                                            <button class="play-pause-btn">
                                                <i class="bi bi-play-fill"></i>
                                            </button>
                                            <input type="range" class="seek-bar" value="0" min="0" max="100" step="1">
                                            <span class="current-time">0:00</span> / <span class="duration">0:00</span>
                                            <input type="range" class="volume-bar" value="100" min="0" max="100" step="1">
                                        </div>
                                    }
                                    else
                                    {
                                        <p>No audio file available.</p>
                                    }
                                </td>

                                <!-- Actions Dropdown -->
                                <td>
                                    <div class="dropdown">
                                        <button class="btn dropdown-toggle custom-burger-icon" type="button" id="dropdownMenuButton-@song.Song.Id" data-bs-toggle="dropdown" aria-expanded="false">
                                            <span class="burger-lines"></span>
                                            <span class="burger-lines"></span>
                                            <span class="burger-lines"></span>
                                        </button>
                                        <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton-@song.Song.Id">
                                            <li>
                                                @if (ViewBag.LikedSongs != null && ((List<Guid>)ViewBag.LikedSongs).Contains(song.Song.Id))
                                                {
                                                    @using (Html.BeginForm("Unlike", "Songs", FormMethod.Post, new { @id = "unlike-form-" + song.Song.Id }))
                                                    {
                                                        @Html.AntiForgeryToken()
                                                        @Html.Hidden("songId", song.Song.Id)
                                                        <button type="button" class="dropdown-item" onclick="handleUnlike('@song.Song.Id')">Unlike</button>
                                                    }
                                                }
                                                else
                                                {
                                                    @using (Html.BeginForm("Like", "Songs", FormMethod.Post, new { @id = "like-form-" + song.Song.Id }))
                                                    {
                                                        @Html.AntiForgeryToken()
                                                        @Html.Hidden("songId", song.Song.Id)
                                                        <button type="button" class="dropdown-item" onclick="handleLike('@song.Song.Id')">Like</button>
                                                    }
                                                }
                                            </li>
                                            <li>
                                                <a asp-action="Edit" asp-route-id="@song.Song.Id" asp-controller="Songs" class="dropdown-item">Edit</a>
                                            </li>
                                            <li>
                                                <a asp-action="Details" asp-route-id="@song.Song.Id" asp-controller="Songs" class="dropdown-item">Details</a>
                                            </li>
                                            <li>
                                                @using (Html.BeginForm("Delete", "Songs", FormMethod.Post, new { @id = "delete-form-" + song.Song.Id }))
                                                {
                                                    @Html.AntiForgeryToken()
                                                    @Html.Hidden("songId", song.Song.Id)
                                                    <button type="submit" class="dropdown-item" onclick="return confirm('Are you sure you want to delete this item?');">Delete</button>
                                                }
                                            </li>
                                            <li>
                                                @if (ViewBag.Playlists != null && ((List<ArtistApplication.Domain.Domain.Playlist>)ViewBag.Playlists).Any())
                                                {
                                                    @using (Html.BeginForm("AddToPlaylist", "Songs", FormMethod.Post))
                                                    {
                                                        @Html.Hidden("songId", song.Song.Id)
                                                        <div class="form-group">
                                                            <select name="playlistId" class="form-control">
                                                                <option value="">Select Playlist</option>
                                                                @foreach (var playlist in (List<ArtistApplication.Domain.Domain.Playlist>)ViewBag.Playlists)
                                                                {
                                                                    <option value="@playlist.Id">@playlist.Name</option>
                                                                }
                                                            </select>
                                                        </div>
                                                        <button type="submit" class="dropdown-item">Add to Playlist</button>
                                                    }
                                                }
                                            </li>
                                        </ul>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p>No songs in this playlist.</p>
            }

            <div class="text-center mt-4">
                <a class="btn btn-primary" asp-action="Edit" asp-route-id="@Model.Id">Edit</a> |
                <a class="btn btn-secondary" asp-action="Index">Back to List</a>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function handleLike(songId) {
            var form = document.getElementById('like-form-' + songId);
            fetch(form.action, {
                method: form.method,
                body: new URLSearchParams(new FormData(form)),
                headers: { 'X-Requested-With': 'XMLHttpRequest' }
            }).then(response => {
                if (response.ok) {
                    location.reload();
                }
            });
        }

        function handleUnlike(songId) {
            var form = document.getElementById('unlike-form-' + songId);
            fetch(form.action, {
                method: form.method,
                body: new URLSearchParams(new FormData(form)),
                headers: { 'X-Requested-With': 'XMLHttpRequest' }
            }).then(response => {
                if (response.ok) {
                    location.reload();
                }
            });
        }
    </script>
}
