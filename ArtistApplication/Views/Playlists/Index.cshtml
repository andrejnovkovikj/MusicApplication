@model IEnumerable<ArtistApplication.Domain.ViewModel.PlaylistViewModel>

@{
    ViewData["Title"] = "Playlists Index";
}

<div class="container container.lg">
    <h2 class="text-center mb-4">Playlists</h2>
    <div class="text-center" style="width: 400px;margin: 0 auto;">
        <form asp-action="Index" method="get">
            <div class="input-group">
                <input type="text" name="searchString" class="form-control custom-input" placeholder="Search songs" value="@ViewBag.SearchString" />
                <button class="btn custom-btn" type="submit">Search</button>
            </div>
        </form>
    </div>

    @if (Model != null && Model.Any())
    {
        <table class="table table-transparent custom-table-playlists border-dark">
            <thead>
                <tr>
                    <th class="border-dark" style="color:white">Picture</th>
                    <th class="border-dark" style="color:white">Name</th>
                    <th class="border-dark" style="color:white">Description</th>
                    <th class="border-dark" style="color:white">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td>
                            @if (!string.IsNullOrEmpty(item.PictureUrl))
                            {
                                var imageUrl = Url.Content(item.PictureUrl);
                                <img src="@imageUrl" alt="Playlist Picture" class="img-fluid" style="max-width: 50px; height: auto;" />
                            }
                            else
                            {
                                <p>No picture available.</p>
                            }
                        </td>

                        <td>
                            <a asp-action="Details" asp-route-id="@item.Id" style="color:white">
                                @item.Name
                            </a>
                        </td>

                        <td style="color:white">
                            @item.Description
                        </td>

                        <td>
                            <div class="dropdown">
                                <button class="btn dropdown-toggle custom-burger-icon" type="button" id="dropdownMenuButton-@item.Id" data-bs-toggle="dropdown" aria-expanded="false">
                                    <span class="burger-lines"></span>
                                    <span class="burger-lines"></span>
                                    <span class="burger-lines"></span>
                                </button>
                                <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton-@item.Id">
                                    <li>
                                        @if (ViewBag.LikedPlaylists != null && ((List<Guid>)ViewBag.LikedPlaylists).Contains(item.Id))
                                        {
                                            @using (Html.BeginForm("Unlike", "Playlists", FormMethod.Post, new { @id = "unlike-form-" + item.Id }))
                                            {
                                                @Html.Hidden("playlistId", item.Id)
                                                <button type="submit" class="dropdown-item" onclick="handleUnlike('@item.Id'); return false;">Dislike</button>
                                            }
                                        }
                                        else
                                        {
                                            @using (Html.BeginForm("Like", "Playlists", FormMethod.Post, new { @id = "like-form-" + item.Id }))
                                            {
                                                @Html.Hidden("playlistId", item.Id)
                                                <button type="submit" class="dropdown-item" onclick="handleLike('@item.Id'); return false;">Like</button>
                                            }
                                        }
                                    </li>
                                    <li>
                                        <a asp-action="Edit" asp-route-id="@item.Id" class="dropdown-item">Edit</a>
                                    </li>
                                    <li>
                                        <a asp-action="Details" asp-route-id="@item.Id" class="dropdown-item">Details</a>
                                    </li>
                                    <li>
                                        @using (Html.BeginForm("Delete", "Playlists", FormMethod.Post, new { @id = "delete-form-" + item.Id }))
                                        {
                                            @Html.AntiForgeryToken()
                                            @Html.Hidden("playlistId", item.Id)
                                            <button type="submit" class="dropdown-item" onclick="return confirm('Are you sure you want to delete this item?');">Delete</button>
                                        }
                                    </li>
                                </ul>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p class="text-center">No playlists available.</p>
    }

    <p style="text-align: center; margin-top:20px;">
        <a asp-action="Create" class="btn btn-primary">Create New</a>
    </p>
</div>

@section Scripts {
    <script>
        function handleLike(playlistId) {
            var form = document.getElementById('like-form-' + playlistId);
            fetch(form.action, {
                method: form.method,
                body: new URLSearchParams(new FormData(form)),
                headers: { 'X-Requested-With': 'XMLHttpRequest' }
            }).then(response => {
                if (response.ok) {
                    location.reload();
                }
            });
        }

        function handleUnlike(playlistId) {
            var form = document.getElementById('unlike-form-' + playlistId);
            fetch(form.action, {
                method: form.method,
                body: new URLSearchParams(new FormData(form)),
                headers: { 'X-Requested-With': 'XMLHttpRequest' }
            }).then(response => {
                if (response.ok) {
                    location.reload();
                }
            });
        }
    </script>
}
